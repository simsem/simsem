
BUGS to fix:
===========

Why does this constrain pop. loadings for first factor, not second?

    load.mod <- matrix(0, nrow = 6, ncol = 2)
    load.mod[1:3, 1] <- paste0("L", 1:3) # same labels apply
    load.mod[4:6, 2] <- paste0("L", 4:6) #     across groups
    (Lambda <- bind(free = load.mod,
                    popParam = "runif(1, .5, .9)"))
    (RTE <- binds(diag(as.numeric(NA), 6), popParam = 1))
    (Beta1 <- bind(matrix(c(0, NA, 0, 0), 2, 2), popParam = .25))
    (Beta2 <- bind(matrix(c(0, NA, 0, 0), 2, 2), popParam = .5))
    (RPS <- binds(diag(as.numeric(NA), 2), popParam = 1))

    mod <- model.sem(LY = Lambda, RPS = RPS, RTE = RTE,
                     BE = list(Beta1, Beta2), ngroups = 2)
    out <- sim(nRep = 2, n = 50, model = mod)
    out@paramValue


How to incorporate lavaan.mi, without allowing internal calls to mice/Amelia?
 - See solution & vignette here: https://github.com/simsem/simsem/issues/86

continuousPower()
- add interval= and level= arguments for uncertainty of estimate

:::continuousLogical()
- only linear, so fucks up when random parameters are centered around 0

New nonnormality tools:
- mnonr package
  - also provides Vale--Maurelli we already use
  - https://doi.org/10.3758/s13428-019-01291-5
- covsim package
  - much more flexibility, costs computational efficiency
  - coauthor (with covsim authors) a vignette showing how to use vita() in
    custom function to pass to sim(..., generate=)
  - or custom function's output & pass to sim(..., rawData=)
    - example could be log-transforming nonnormal variable(s)


Need to make lavaanList() an option
- without gutting all of simsem? Or introducing probability of more errors?
- consider a new "simsemList" package that provides an interface to simply
  rely on lavaanList() functionality
  - simlavaanList(), with wrappers simcfaList() and simsemList() that call
    lavaanList() with FUN= and *List= arguments, return SimResult object
  - dataFunction= can do the work of both generate= and datafun=
    - generate= function can only have 1 argument (n=), but lavaanList() has dataFunction.args=
  - FUN= can do the work of outfun= (still need simsem for outfundata=)

